triggers {
    pollSCM('* * * * *')  // checks every minute for new commits
}

pipeline {
    agent any

    environment {
        IMAGE_NAME = "garisonmike/messaging_app"
        MYSQL_ROOT_PASSWORD = "root"
        MYSQL_DATABASE = "test_db"
        MYSQL_USER = "root"
        MYSQL_PASSWORD = "root"
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the repository
                checkout scm
            }
        }

        // Run subsequent stages inside the project directory
        dir('messaging_app') {
            stage('Install Dependencies') {
                steps {
                    // Create a virtual environment
                    sh 'python3 -m venv venv'
                    sh '. venv/bin/activate'
                    sh 'pip install --upgrade pip'
                    sh 'pip install -r requirements.txt'
                    sh 'pip install pytest pytest-cov'
                }
            }

            stage('Start MySQL Service') {
                steps {
                    // Start MySQL container for testing
                    sh '''
                    docker run -d --name mysql-test \
                      -e MYSQL_ROOT_PASSWORD=root \
                      -e MYSQL_DATABASE=test_db \
                      -p 3306:3306 mysql:5.7
                    echo "Waiting for MySQL to initialize..."
                    sleep 30
                    '''
                }
            }

            stage('Run Tests') {
                steps {
                    // Activate virtual environment and run tests
                    sh ". venv/bin/activate && python manage.py test"
                }
            }

            stage('Stop MySQL Service') {
                steps {
                    // Stop and remove the MySQL container
                    sh "docker stop ${DB_CONTAINER_NAME} && docker rm ${DB_CONTAINER_NAME}"
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'pytest-report.xml', allowEmptyArchive: true
            echo "Pipeline finished!"
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Build failed. Check logs for details.'
        }
    }
}
