pipeline {
    agent any

    triggers {
        // Poll SCM every minute
        pollSCM('* * * * *')
    }

    environment {
        IMAGE_NAME          = "garisonmike/messaging_app:latest"
        MYSQL_ROOT_PASSWORD = "rootpassword123"
        MYSQL_PASSWORD      = "changeme123"
        MYSQL_USER          = "messaging_user"
        MYSQL_DB            = "messaging_db"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Reset Environment') {
            steps {
                dir('messaging_app') {
                    sh 'docker compose down -v || true'
                }
            }
        }

        stage('Verify Docker CLI') {
            steps {
                sh 'docker --version'
                sh 'docker compose version'
            }
        }

        stage('Prepare .env') {
            steps {
                dir('messaging_app') {
                    sh '''
cat <<EOF > .env
MYSQL_DB=${MYSQL_DB}
MYSQL_USER=${MYSQL_USER}
MYSQL_PASSWORD=${MYSQL_PASSWORD}
MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
EOF
                    '''
                }
            }
        }

        stage('Build Services') {
            steps {
                dir('messaging_app') {
                    sh 'docker compose build'
                }
            }
        }

        stage('Start Services') {
            steps {
                dir('messaging_app') {
                    sh '''
set -e
docker compose up -d db
for i in $(seq 1 10); do
    if docker compose exec -T db mysqladmin ping -h localhost -u root -p${MYSQL_ROOT_PASSWORD} --silent; then
        echo "MySQL is ready!"
        exit 0
    fi
    echo "Waiting for MySQL... ($i/10)"
    sleep 5
done
echo "MySQL did not become ready in time"
exit 1
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    sh """
                        docker compose run --rm web sh -lc 'cd /app && python manage.py migrate --noinput && python manage.py test'
                    """
                }
            }
        }

        stage('Build Application Image') {
            steps {
                dir('messaging_app') {
                    sh 'docker build -t ${IMAGE_NAME} .'
                }
            }
        }
    }

    post {
        always {
            dir('messaging_app') {
                sh 'docker compose down -v || true'
                sh 'rm -f .env'
            }
            echo 'Pipeline finished!'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Build failed. Check logs for details.'
        }
    }
}
