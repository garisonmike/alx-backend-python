triggers {
    pollSCM('* * * * *')  // checks every minute for new commits
}

pipeline {
    agent any

    environment {
        IMAGE_NAME = "garisonmike/messaging_app"
        MYSQL_ROOT_PASSWORD = "root"
        MYSQL_DATABASE = "test_db"
        MYSQL_USER = "root"
        MYSQL_PASSWORD = "root"
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the repository
                checkout scm
            }
        }

                stage('Install Dependencies') {
            steps {
                dir('messaging_app') {
                    // Create a virtual environment
                    sh 'python3 -m venv venv'
                    // Activate virtual environment and install dependencies
                    sh '. venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt'
                }
            }
        }

        stage('Start MySQL Service') {
            steps {
                dir('messaging_app') {
                    // Start MySQL container for testing
                    sh "docker run --name ${DB_CONTAINER_NAME} -e MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD} -e MYSQL_DATABASE=${DB_NAME} -d mysql:8.0"
                    // Wait for MySQL to be ready
                    sh 'sleep 30'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    // Activate virtual environment and run tests
                    sh ". venv/bin/activate && python manage.py test"
                }
            }
        }

        stage('Stop MySQL Service') {
            steps {
                dir('messaging_app') {
                    // Stop and remove the MySQL container
                    sh "docker stop ${DB_CONTAINER_NAME} && docker rm ${DB_CONTAINER_NAME}"
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'pytest-report.xml', allowEmptyArchive: true
            echo "Pipeline finished!"
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Build failed. Check logs for details.'
        }
    }
}
