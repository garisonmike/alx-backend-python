name: Django CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword123
          MYSQL_DATABASE: messaging_db
          MYSQL_USER: messaging_user
          MYSQL_PASSWORD: changeme123
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -prootpassword123"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      DATABASE_HOST: 127.0.0.1
      DATABASE_PORT: 3306
      DATABASE_NAME: messaging_db
      DATABASE_USER: messaging_user
      DATABASE_PASSWORD: changeme123
      DJANGO_SETTINGS_MODULE: messaging_app.settings
      PYTHONPATH: "${{ github.workspace }}/messaging_app"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        working-directory: messaging_app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 coverage

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..10}; do
            if mysqladmin ping -h 127.0.0.1 -uroot -prootpassword123 --silent; then
              echo "MySQL is ready!"
              exit 0
            fi
            echo "Waiting for MySQL ($i/10)..."
            sleep 5
          done
          echo "MySQL not ready in time" && exit 1

      - name: Run migrations
        working-directory: messaging_app
        run: python manage.py migrate --noinput

      - name: Run tests with coverage
        working-directory: messaging_app
        run: coverage run manage.py test

      - name: Generate coverage report
        working-directory: messaging_app
        run: coverage xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: messaging_app/coverage.xml

      - name: Run flake8 linting
        working-directory: messaging_app
        run: |
          echo "Running flake8 checks..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=10 --max-line-length=120 --statistics
