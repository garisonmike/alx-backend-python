pipeline {
    agent any

    environment {
        // Docker/MySQL settings used by docker-compose and Django
        MYSQL_ROOT_PASSWORD = "rootpassword123"
        MYSQL_PASSWORD      = "changeme123"
        MYSQL_USER          = "messaging_user"
        MYSQL_DB            = "messaging_db"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare .env') {
            steps {
                dir('messaging_app') {
                    sh '''
set -e
cat > .env <<EOF
MYSQL_DB=${MYSQL_DB}
MYSQL_USER=${MYSQL_USER}
MYSQL_PASSWORD=${MYSQL_PASSWORD}
MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
EOF
                    '''
                }
            }
        }

        stage('Start Database') {
            steps {
                dir('messaging_app') {
                    sh '''
set -e
docker compose down -v || true
docker compose up -d db
for i in $(seq 1 12); do
  if docker compose exec -T db mysqladmin ping -h localhost -u root -p${MYSQL_ROOT_PASSWORD} --silent; then
    echo "MySQL is ready"
    exit 0
  fi
  echo "Waiting for MySQL... ($i/12)"
  sleep 5
done
echo "MySQL did not become ready in time" >&2
exit 1
                    '''
                }
            }
        }

        stage('Set up Python env') {
            steps {
                dir('messaging_app') {
                    sh '''
set -e
python3 -m venv .venv
. .venv/bin/activate
python -m pip install --upgrade pip
python -m pip install -r requirements.txt
# ensure pytest tooling is present even if not in requirements
python -m pip install pytest pytest-django pytest-cov
                    '''
                }
            }
        }

        stage('Run Pytest') {
            steps {
                dir('messaging_app') {
                    sh '''
set -e
. .venv/bin/activate
mkdir -p reports
# Run pytest; let it discover Django tests too
pytest -q --maxfail=1 --disable-warnings \
  --junitxml=reports/pytest-report.xml \
  --cov=. --cov-report=xml:reports/coverage.xml
                    '''
                }
            }
        }
    }

    post {
        always {
            // Publish test results and coverage even on failures
            junit allowEmptyResults: true, testResults: 'messaging_app/reports/pytest-report.xml'
            archiveArtifacts artifacts: 'messaging_app/reports/**', allowEmptyArchive: true
            dir('messaging_app') {
                sh 'docker compose down -v || true'
                sh 'rm -f .env || true'
            }
        }
    }
}
pipeline {
    agent any

    triggers {
        pollSCM('* * * * *')
    }

    environment {
        IMAGE_NAME          = "garisonmike/messaging_app:latest"
        MYSQL_ROOT_PASSWORD = "rootpassword123"
        MYSQL_PASSWORD      = "changeme123"
        MYSQL_USER          = "messaging_user"
        MYSQL_DB            = "messaging_db"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Reset Environment') {
            steps {
                dir('messaging_app') {
                    sh 'docker compose down -v || true'
                }
            }
        }

        stage('Verify Docker CLI') {
            steps {
                sh 'docker --version'
                sh 'docker compose version'
            }
        }

        stage('Prepare .env') {
            steps {
                dir('messaging_app') {
                    sh '''
cat <<EOF > .env
MYSQL_DB=${MYSQL_DB}
MYSQL_USER=${MYSQL_USER}
MYSQL_PASSWORD=${MYSQL_PASSWORD}
MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
EOF
                    '''
                }
            }
        }

        stage('Build Services') {
            steps {
                dir('messaging_app') {
                    sh 'docker compose build'
                }
            }
        }

        stage('Start Services') {
            steps {
                dir('messaging_app') {
                    sh '''
set -e
docker compose up -d db
for i in $(seq 1 10); do
    if docker compose exec -T db mysqladmin ping -h localhost -u root -p${MYSQL_ROOT_PASSWORD} --silent; then
        echo "MySQL is ready!"
        exit 0
    fi
    echo "Waiting for MySQL... ($i/10)"
    sleep 5
done
echo "MySQL did not become ready in time"
exit 1
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    sh '''
echo "=== container filesystem (recursively) at /app ==="
docker compose run --rm web ls -R /app || true

echo "=== check for manage.py file ==="
docker compose run --rm web sh -c '[ -f /app/manage.py ] && echo "manage.py found at /app/manage.py" || (echo "ERROR: manage.py NOT found at /app/manage.py" && exit 2)'

echo "=== run migrations and tests from /app ==="
# ensure working directory is /app so python can import messaging_app package
docker compose run --rm -w /app web python manage.py migrate --noinput
docker compose run --rm -w /app web python manage.py test
                    '''
                }
            }
        }

        stage('Build Application Image') {
            steps {
                dir('messaging_app') {
                    sh 'docker build -t ${IMAGE_NAME} .'
                }
            }
        }
    }

    post {
        always {
            dir('messaging_app') {
                sh 'docker compose down -v || true'
                sh 'rm -f .env'
            }
            echo 'Pipeline finished!'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Build failed. Check logs for details.'
        }
    }
}
